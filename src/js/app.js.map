{"version":3,"sources":["src/ts/circleText.ts","src/ts/mobileMenu.ts","src/ts/phoneNumber.ts","src/ts/textAnimationWithOpacity.ts","src/ts/videoControls.ts"],"names":["makeCircleText","collection","document","getElementsByClassName","correctionForSymbols","А","В","Е","Ж","И","Н","О","П","У","Ы","Ь","Я","i","length","element","HTMLElement","collectionElementText","outerText","toUpperCase","rotation","innerHTML","split","map","symbol","index","concat","join","mobileMenu","querySelector","burger","closeButton","window","innerWidth","addEventListener","style","left","phoneInput","vanilla_text_mask_1","maskInput","inputElement","mask","h1Array","querySelectorAll","prefixForID","speed","symbolID","addSpansWithOpacity0","rowNumber","textContent","textContentAfterSplit","textContentLength","addOpacity1","forCleanInterval","setInterval","classList","add","clearInterval","textBlock","text","playButton","video","play","Error","pause","opacity"],"mappings":"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","file":"app.js","sourcesContent":["makeCircleText()\r\n\r\nfunction makeCircleText() {\r\n    // забираем все элементы с классом text-for-circle-in-js в одну коллекцию\r\n    const collection = document.getElementsByClassName(\"text-for-circle-in-js\");\r\n\r\n    // создаём объект, где лежат коррекции для каждого символа\r\n    const correctionForSymbols: Record<string, number> = {\r\n    А: 0.5,\r\n    В: 0.5,\r\n    Е: 1,\r\n    Ж: -1.8,\r\n    И: -0.5,\r\n    Н: -0.5,\r\n    О: -1,\r\n    П: 1,\r\n    У: 1,\r\n    Ы: -1,\r\n    Ь: 1,\r\n    Я: -1,\r\n    };\r\n\r\n  // берём по очереди каждый DOM элемент коллекции text\r\n  for (let i = 0; i < collection.length; i++) {\r\n\r\n    const element = collection[i];\r\n    \r\n    if (!(element instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    // забираем весь текст из DOM элемента коллекции и переводим его в верхний регистр\r\n    // const collectionElementText = collection[i].outerText.toUpperCase();\r\n    const collectionElementText = element.outerText.toUpperCase();\r\n    // делим полную окружность на количество элементов в строке + 1 пробел\r\n    const rotation = 360 / (collectionElementText.length + 1);\r\n\r\n    // пересобираем текст и добавляем каждому символу координату вдоль окружности плюс коррекцию\r\n    collection[i].innerHTML = collectionElementText\r\n      .split(\"\")\r\n      .map(\r\n        (symbol, index) =>\r\n          `<span class=\"circle-text\" style=\"--rot:${\r\n            index * rotation + (correctionForSymbols[symbol] || 0)\r\n          }deg\">${symbol}</span>`\r\n      )\r\n      .join(\"\");\r\n  }\r\n}","mobileMenu()\r\n\r\nfunction mobileMenu() {\r\n    const mobileMenu: HTMLElement | null = document.querySelector('.mobile-menu')\r\n    const burger = document.querySelector('.burger-button')\r\n    const closeButton = document.querySelector('.close-button')\r\n\r\n    if (mobileMenu && burger && closeButton && (window.innerWidth < 745)) {\r\n        burger.addEventListener('click', () => {\r\n            mobileMenu.style.left = '0'\r\n        })\r\n        closeButton.addEventListener('click', () => {\r\n            mobileMenu.style.left = '-100%'\r\n        })\r\n    }\r\n}\r\n\r\n","import vanillaTextMask from \"vanilla-text-mask\";\r\n\r\nconst phoneMask = [\r\n  \"+\",\r\n  \"7\",\r\n  \" \",\r\n  \"(\",\r\n  /[1-9]/,\r\n  /\\d/,\r\n  /\\d/,\r\n  \")\",\r\n  \" \",\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  \"-\",\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n  /\\d/,\r\n];\r\n\r\nconst phoneInput = document.querySelector(\"#phone\");\r\n\r\nvanillaTextMask.maskInput({\r\n  inputElement: phoneInput,\r\n  mask: phoneMask,\r\n});\r\n","const h1Array = document.querySelectorAll(\".tagline-h1\");\r\nconst prefixForID = \"symbol-\";\r\nconst speed = 100;\r\nlet symbolID = 0;\r\n\r\naddSpansWithOpacity0();\r\naddOpacity1();\r\n\r\nfunction addSpansWithOpacity0() {\r\n  for (let rowNumber = 0; rowNumber < h1Array.length; rowNumber++) {\r\n    const textContent = h1Array[rowNumber].textContent;\r\n    \r\n    if (!textContent || window.innerWidth < 1023) {\r\n      return\r\n    }\r\n    \r\n    const textContentAfterSplit = textContent.split(\"\");\r\n    const textContentLength = textContent.length;\r\n    \r\n    h1Array[rowNumber].innerHTML = \"\";\r\n\r\n    for (let i = 0; i < textContentLength; i++) {\r\n      h1Array[\r\n        rowNumber\r\n      ].innerHTML += `<span class=\"opacity-0-styling\" id=\"${prefixForID}${symbolID}\">${textContentAfterSplit[i]}</span>`;\r\n      symbolID++;\r\n    }\r\n  }\r\n  symbolID = 0;\r\n}\r\n\r\nfunction addOpacity1() {\r\n  const forCleanInterval = setInterval(() => {\r\n    let symbol = document.querySelector(`#${prefixForID}${symbolID}`);\r\n    if (symbol) {\r\n      symbol.classList.add(\"opacity-1-styling\");\r\n      symbolID++;\r\n    } else clearInterval(forCleanInterval);\r\n  }, speed);\r\n}\r\n","const textBlock = document.querySelector(\".text-on-video-div\");\r\nconst text: HTMLElement | null = document.querySelector(\".text-on-video-p\");\r\nconst playButton: HTMLElement | null = document.querySelector(\".play-button\");\r\nconst video: HTMLMediaElement | null = document.querySelector(\".video\");\r\n\r\nlet play = false;\r\n\r\nif (textBlock && text && playButton && video) {\r\n    textBlock.addEventListener(\"click\", () => {\r\n        if (play) {\r\n          play = false;\r\n          video.pause();\r\n          text.style.opacity = \"0.99\";\r\n          playButton.style.opacity = \"0.5\";\r\n        } else {\r\n          play = true;\r\n          video.play();\r\n          text.style.opacity = \"0\";\r\n          playButton.style.opacity = \"0\";\r\n        }\r\n      });\r\n} else {\r\n    throw Error('Can`t fined elements with classes (.text-on-video-div || .text-on-video-p || .play-button || .video)')    \r\n}"]}